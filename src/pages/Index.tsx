import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { GoogleGenerativeAI } from '@google/generative-ai';

interface ArtIdea {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  materials: string[];
  inspiration: string;
}

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  ideas?: ArtIdea[];
}

const ArtAssistant = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üé® –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!',
      timestamp: new Date(),
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showApiInput, setShowApiInput] = useState(true);

  const artIdeasDatabase: ArtIdea[] = [
    {
      id: '1',
      title: '–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç —ç–º–æ—Ü–∏–π',
      description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ä—Ç—Ä–µ—Ç, –≥–¥–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è',
      category: '–ñ–∏–≤–æ–ø–∏—Å—å',
      difficulty: 'Medium',
      materials: ['–ê–∫—Ä–∏–ª–æ–≤—ã–µ –∫—Ä–∞—Å–∫–∏', '–•–æ–ª—Å—Ç', '–ö–∏—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤'],
      inspiration: '–†–∞–±–æ—Ç—ã –í–∞—Å–∏–ª–∏—è –ö–∞–Ω–¥–∏–Ω—Å–∫–æ–≥–æ –∏ –§—Ä–µ–Ω—Å–∏—Å–∞ –ë—ç–∫–æ–Ω–∞'
    },
    {
      id: '2',
      title: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ –≤ –¥–æ–∂–¥—å',
      description: '–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ–Ω–æ–≤–æ–≥–æ —Å–≤–µ—Ç–∞ –Ω–∞ –º–æ–∫—Ä–æ–º –∞—Å—Ñ–∞–ª—å—Ç–µ –≤ –≤–µ—á–µ—Ä–Ω–µ–º –≥–æ—Ä–æ–¥–µ',
      category: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
      difficulty: 'Easy',
      materials: ['–ö–∞–º–µ—Ä–∞/—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–®—Ç–∞—Ç–∏–≤', '–ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ–∂–¥—è'],
      inspiration: '–°—Ç–∏–ª—å –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –∏ —Ä–∞–±–æ—Ç—ã –°–∞—É–ª–∞ –õ–µ–π—Ç–µ—Ä–∞'
    },
    {
      id: '3',
      title: '–°–∫—É–ª—å–ø—Ç—É—Ä–∞ –∏–∑ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      description: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã',
      category: '–°–∫—É–ª—å–ø—Ç—É—Ä–∞',
      difficulty: 'Hard',
      materials: ['–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–ö–ª–µ–π', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–∞–ª–ª–æ–º'],
      inspiration: '–†–∞–±–æ—Ç—ã –≠–ª—å –ê–Ω–∞—Ç—Å—É–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ Arte Povera'
    },
    {
      id: '4',
      title: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –Ω–∞—Ç—é—Ä–º–æ—Ä—Ç',
      description: '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏–∑ 2-3 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∏–≥—Ä—É —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏',
      category: '–ñ–∏–≤–æ–ø–∏—Å—å',
      difficulty: 'Easy',
      materials: ['–ö–∞—Ä–∞–Ω–¥–∞—à–∏', '–ë—É–º–∞–≥–∞', '–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏'],
      inspiration: '–†–∞–±–æ—Ç—ã –î–∂–æ—Ä–¥–∂–æ –ú–æ—Ä–∞–Ω–¥–∏'
    },
    {
      id: '5',
      title: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ª–ª–∞–∂ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π',
      description: '–°–æ–∑–¥–∞–π—Ç–µ —Å—é—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–æ–ª–ª–∞–∂, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
      category: '–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
      difficulty: 'Medium',
      materials: ['–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω—à–µ—Ç', 'Photoshop/GIMP', '–õ–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'],
      inspiration: '–†–∞–±–æ—Ç—ã –î—ç–≤–∏–¥–∞ –•–æ–∫–Ω–∏ –∏ –•–∞–Ω–Ω—ã –•—ë—Ö'
    },
    {
      id: '6',
      title: '–•–∞–π–∫—É –≤ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏–∏',
      description: '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ —Ö–∞–π–∫—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ–≥–æ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏–µ–π',
      category: '–ö–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è',
      difficulty: 'Medium',
      materials: ['–¢—É—à—å', '–ü–µ—Ä—å—è', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞'],
      inspiration: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —è–ø–æ–Ω—Å–∫–∞—è –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è'
    }
  ];

  const generateArtIdeasWithAI = async (prompt: string): Promise<ArtIdea[]> => {
    if (!apiKey) {
      return generateArtIdeas(prompt);
    }

    try {
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const aiPrompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤—É –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É. –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${prompt}" —Å–æ–∑–¥–∞–π 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–¥–µ–∏.

–î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ)
2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ö–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–∞ (–ñ–∏–≤–æ–ø–∏—Å—å, –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –°–∫—É–ª—å–ø—Ç—É—Ä–∞, –¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –ö–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è, –†—É–∫–æ–¥–µ–ª–∏–µ –∏ —Ç.–¥.)
4. –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (Easy, Medium, Hard)
5. –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (3-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
6. –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è (—Ö—É–¥–æ–∂–Ω–∏–∫–∏, —Å—Ç–∏–ª–∏, –¥–≤–∏–∂–µ–Ω–∏—è)

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "ideas": [
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
      "difficulty": "Easy/Medium/Hard",
      "materials": ["–º–∞—Ç–µ—Ä–∏–∞–ª1", "–º–∞—Ç–µ—Ä–∏–∞–ª2", "–º–∞—Ç–µ—Ä–∏–∞–ª3"],
      "inspiration": "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"
    }
  ]
}
`;

      const result = await model.generateContent(aiPrompt);
      const response = await result.response;
      const text = response.text();
      
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return parsed.ideas.map((idea: any, index: number) => ({
          id: `ai_${Date.now()}_${index}`,
          ...idea
        }));
      }
    } catch (error) {
      console.error('Error generating AI ideas:', error);
    }

    return generateArtIdeas(prompt);
  };

  const generateArtIdeas = (prompt: string): ArtIdea[] => {
    const keywords = prompt.toLowerCase();
    let relevantIdeas = artIdeasDatabase;

    if (keywords.includes('–≥—Ä—É—Å') || keywords.includes('–º–µ–ª–∞–Ω—Ö–æ–ª') || keywords.includes('–ø–µ—á–∞–ª')) {
      relevantIdeas = artIdeasDatabase.filter(idea => 
        idea.title.includes('–ø–æ—Ä—Ç—Ä–µ—Ç') || idea.title.includes('–¥–æ–∂–¥—å') || idea.category === '–ñ–∏–≤–æ–ø–∏—Å—å'
      );
    } else if (keywords.includes('–≥–æ—Ä–æ–¥') || keywords.includes('—É–ª–∏—Ü') || keywords.includes('—Å–æ–≤—Ä–µ–º–µ–µ–Ω')) {
      relevantIdeas = artIdeasDatabase.filter(idea => 
        idea.title.includes('–≥–æ—Ä–æ–¥') || idea.category === '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
      );
    } else if (keywords.includes('–ø—Ä–æ—Å—Ç–æ–π') || keywords.includes('–º–∏–Ω–∏–º–∞–ª') || keywords.includes('–Ω–∞—á–∏–Ω–∞')) {
      relevantIdeas = artIdeasDatabase.filter(idea => idea.difficulty === 'Easy');
    } else if (keywords.includes('—ç–∫–æ–ª–æ–≥') || keywords.includes('–ø—Ä–∏—Ä–æ–¥') || keywords.includes('–ø–µ—Ä–µ—Ä–∞–±–æ—Ç')) {
      relevantIdeas = artIdeasDatabase.filter(idea => 
        idea.title.includes('–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö') || idea.category === '–°–∫—É–ª—å–ø—Ç—É—Ä–∞'
      );
    }

    return relevantIdeas.slice(0, 3);
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date(),
    };

    const prompt = inputValue;
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsGenerating(true);

    try {
      const ideas = await generateArtIdeasWithAI(prompt);
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: apiKey ? '–í–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å –ø–æ–º–æ—â—å—é Google Gemini AI:' : '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å:',
        timestamp: new Date(),
        ideas: ideas,
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsGenerating(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'bg-green-100 text-green-800';
      case 'Medium': return 'bg-yellow-100 text-yellow-800';
      case 'Hard': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen gradient-bg">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8 animate-fade-in">
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-4">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ê—Ä—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
          </h1>
          <p className="text-xl text-white/80 max-w-2xl mx-auto mb-6">
            –ù–∞–π–¥–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
          </p>
          
          {/* API Key Input */}
          {showApiInput && (
            <Card className="glass-effect border-white/20 max-w-md mx-auto mb-6">
              <CardContent className="p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <Icon name="Key" size={16} className="text-white" />
                  <span className="text-white text-sm font-medium">Google Gemini API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
                </div>
                <div className="flex space-x-2">
                  <Input
                    type="password"
                    value={apiKey}
                    onChange={(e) => setApiKey(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:bg-white/20"
                  />
                  <Button
                    onClick={() => setShowApiInput(false)}
                    className="bg-white/20 hover:bg-white/30 text-white"
                  >
                    <Icon name="Check" size={16} />
                  </Button>
                </div>
                <p className="text-white/60 text-xs mt-2">
                  –ë–µ–∑ API –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–¥–µ–∏. –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: <a href="https://ai.google.dev/" target="_blank" className="underline">ai.google.dev</a>
                </p>
              </CardContent>
            </Card>
          )}
          
          {!showApiInput && apiKey && (
            <div className="flex items-center justify-center space-x-2 mb-4">
              <Icon name="Zap" size={16} className="text-yellow-400" />
              <span className="text-white/80 text-sm">–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Google Gemini AI</span>
              <Button
                onClick={() => setShowApiInput(true)}
                size="sm"
                className="bg-white/10 hover:bg-white/20 text-white text-xs px-2 py-1 h-auto"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å
              </Button>
            </div>
          )}
        </div>

        {/* Main Chat Interface */}
        <div className="max-w-4xl mx-auto">
          <Card className="glass-effect border-white/20 mb-6 animate-fade-in" style={{animationDelay: '0.2s'}}>
            <CardContent className="p-6">
              {/* Messages */}
              <div className="space-y-6 mb-6 max-h-96 overflow-y-auto">
                {messages.map((message, index) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} animate-fade-in`}
                    style={{animationDelay: `${index * 0.1}s`}}
                  >
                    <div className={`max-w-3xl ${
                      message.type === 'user' 
                        ? 'bg-white/20 text-white' 
                        : 'bg-white text-gray-800'
                    } rounded-2xl p-4 shadow-lg`}>
                      <div className="flex items-start space-x-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          message.type === 'user' 
                            ? 'bg-white/20' 
                            : 'bg-gradient-to-r from-purple-500 to-blue-500'
                        }`}>
                          <Icon 
                            name={message.type === 'user' ? 'User' : 'Palette'} 
                            size={16} 
                            className={message.type === 'user' ? 'text-white' : 'text-white'} 
                          />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm mb-2">{message.content}</p>
                          
                          {/* Art Ideas */}
                          {message.ideas && message.ideas.length > 0 && (
                            <div className="grid gap-4 mt-4">
                              {message.ideas.map((idea) => (
                                <Card key={idea.id} className="border border-gray-200 hover:shadow-lg transition-all duration-300 hover:scale-105">
                                  <CardHeader className="pb-2">
                                    <div className="flex justify-between items-start">
                                      <CardTitle className="text-lg text-gray-800">{idea.title}</CardTitle>
                                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(idea.difficulty)}`}>
                                        {idea.difficulty}
                                      </span>
                                    </div>
                                  </CardHeader>
                                  <CardContent>
                                    <p className="text-gray-600 mb-3">{idea.description}</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center space-x-2">
                                        <Icon name="Tag" size={14} className="text-purple-500" />
                                        <span className="text-sm font-medium text-purple-600">{idea.category}</span>
                                      </div>
                                      <div className="flex items-start space-x-2">
                                        <Icon name="Package" size={14} className="text-blue-500 mt-0.5" />
                                        <span className="text-sm text-gray-600">{idea.materials.join(', ')}</span>
                                      </div>
                                      <div className="flex items-start space-x-2">
                                        <Icon name="Lightbulb" size={14} className="text-yellow-500 mt-0.5" />
                                        <span className="text-sm text-gray-600">{idea.inspiration}</span>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {isGenerating && (
                  <div className="flex justify-start animate-fade-in">
                    <div className="bg-white rounded-2xl p-4 shadow-lg">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center animate-pulse-glow">
                          <Icon name="Palette" size={16} className="text-white" />
                        </div>
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Input Area */}
              <div className="flex space-x-4">
                <Textarea
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ..."
                  className="flex-1 min-h-[60px] bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:bg-white/20"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isGenerating}
                  className="bg-white/20 hover:bg-white/30 text-white border-white/20 px-6 transition-all duration-300 hover:scale-105"
                >
                  <Icon name="Send" size={18} />
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 animate-fade-in" style={{animationDelay: '0.4s'}}>
            {[
              { icon: 'Brush', title: '–ñ–∏–≤–æ–ø–∏—Å—å', desc: '–ò–¥–µ–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω –∏ —Ä–∏—Å—É–Ω–∫–æ–≤' },
              { icon: 'Camera', title: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', desc: '–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è —Å—ä–µ–º–∫–∏' },
              { icon: 'Scissors', title: '–†—É–∫–æ–¥–µ–ª–∏–µ', desc: '–ü–æ–¥–µ–ª–∫–∏ –∏ hand-made' }
            ].map((action, index) => (
              <Card 
                key={action.title}
                className="glass-effect border-white/20 hover:bg-white/20 transition-all duration-300 cursor-pointer hover:scale-105"
                onClick={() => setInputValue(action.title.toLowerCase())}
              >
                <CardContent className="p-4 text-center">
                  <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Icon name={action.icon as any} size={24} className="text-white" />
                  </div>
                  <h3 className="text-white font-semibold mb-1">{action.title}</h3>
                  <p className="text-white/70 text-sm">{action.desc}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArtAssistant;